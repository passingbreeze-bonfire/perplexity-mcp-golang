name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format. Expected: vX.Y.Z (e.g., v1.0.0)"
            exit 1
          fi
          echo "✅ Version format is valid: ${{ github.event.inputs.version }}"

      - name: Check if tag already exists
        run: |
          if git tag -l | grep -q "^${{ github.event.inputs.version }}$"; then
            echo "❌ Tag ${{ github.event.inputs.version }} already exists"
            exit 1
          fi
          echo "✅ Tag ${{ github.event.inputs.version }} does not exist"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ github.event.inputs.version }}
            type=raw,value=latest
            type=sha,prefix={{branch}}-,format=short
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.description=Perplexity AI MCP Server for website search
            org.opencontainers.image.version=${{ github.event.inputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT

      - name: Create git tag
        run: |
          git config --local user.email "jeongmin1237@gmail.com"
          git config --local user.name "passingbreeze"
          git tag -a "${{ github.event.inputs.version }}" -m "Release ${{ github.event.inputs.version }}"
          git push origin "${{ github.event.inputs.version }}"

      - name: Create draft release
        id: create_release
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          cat > release_notes.md << EOF
          ## 🚀 Release ${{ github.event.inputs.version }}
          
          ### 🐳 Docker Images
          
          Multi-architecture images are available for \`linux/amd64\` and \`linux/arm64\`:
          
          \`\`\`bash
          # Pull specific version
          docker pull ghcr.io/${REPO_NAME}:${{ github.event.inputs.version }}
          
          # Pull latest
          docker pull ghcr.io/${REPO_NAME}:latest
          
          # Pull by commit SHA
          docker pull ghcr.io/${REPO_NAME}:main-${GITHUB_SHA:0:7}
          \`\`\`
          
          ### 📋 Usage
          
          \`\`\`bash
          # Run the MCP server
          docker run -p 8080:8080 -e PERPLEXITY_API_KEY=your_key ghcr.io/${REPO_NAME}:${{ github.event.inputs.version }}
          \`\`\`
          
          ### 🏗️ Build Information
          
          - **Commit:** [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Supported Architectures:** linux/amd64, linux/arm64
          
          ---
          
          **Full Changelog:** [Compare changes](https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ github.event.inputs.version }})
          EOF
          
          gh release create "${{ github.event.inputs.version }}" \
            --title "Release ${{ github.event.inputs.version }}" \
            --notes-file release_notes.md \
            --draft \
            --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Publish release
        run: |
          gh release edit "${{ github.event.inputs.version }}" --draft=false
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Release summary
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Version:** ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Git Tag:** Created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Docker Images:** Built for linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Registry:** Published to ghcr.io/${REPO_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Release:** Published on GitHub" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Available Images" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${REPO_NAME}:${{ github.event.inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${REPO_NAME}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${REPO_NAME}:main-${GITHUB_SHA:0:7}\`" >> $GITHUB_STEP_SUMMARY